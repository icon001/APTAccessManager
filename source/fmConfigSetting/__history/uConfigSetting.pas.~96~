unit uConfigSetting;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, W7Classes, W7Panels, AdvOfficeTabSet,
  AdvOfficeTabSetStylers, AdvSmoothPanel, Vcl.ExtCtrls, AdvSmoothLabel,
  Vcl.StdCtrls, AdvEdit, Vcl.Buttons, Vcl.Grids, AdvObj, BaseGrid, AdvGrid,
  AdvToolBtn,ADODB,ActiveX, uSubForm, CommandArray,Winapi.WinSpool,System.iniFiles,
  AdvToolBar, AdvToolBarStylers, AdvCombo, AdvGroupBox, AdvAppStyler,
  AdvOfficeButtons;

type
  TfmConfigSetting = class(TfmASubForm)
    Image1: TImage;
    BodyPanel: TW7Panel;
    menuTab: TAdvOfficeTabSet;
    dongCodeList: TAdvSmoothPanel;
    lb_RegPort: TAdvSmoothLabel;
    btn_CardRegistportSave: TSpeedButton;
    AdvToolBarOfficeStyler1: TAdvToolBarOfficeStyler;
    AdvOfficeTabSetOfficeStyler1: TAdvOfficeTabSetOfficeStyler;
    cmb_ComPort: TAdvComboBox;
    FormNameChange: TAdvSmoothPanel;
    gb_Change: TAdvGroupBox;
    lb_SearchName: TAdvSmoothLabel;
    lb_ChangeName: TAdvSmoothLabel;
    btn_NameChange: TSpeedButton;
    ed_OldName: TAdvEdit;
    ed_NewName: TAdvEdit;
    cmb_Condition: TAdvComboBox;
    pan_TestData: TAdvSmoothPanel;
    btn_CardCreate: TSpeedButton;
    AdvSmoothLabel1: TAdvSmoothLabel;
    ed_CardCnt: TAdvEdit;
    lb_Count: TAdvSmoothLabel;
    AdvFormStyler1: TAdvFormStyler;
    chk_AlarmEventView: TAdvOfficeCheckBox;
    AdvSmoothLabel2: TAdvSmoothLabel;
    cmb_Monitoring: TAdvComboBox;
    procedure menuTabChange(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure btn_addClick(Sender: TObject);
    procedure btn_CardRegistportSaveClick(Sender: TObject);
    procedure btn_NameChangeClick(Sender: TObject);
    procedure btn_CardCreateClick(Sender: TObject);
    procedure chk_AlarmEventViewClick(Sender: TObject);
  private
    { Private declarations }
    procedure ComportRefresh;
  private
    EmpTypeCodeList : TStringList;
    ComPortList : TStringList;
    { Private declarations }
    function GetSerialPortList(List : TStringList; const doOpenTest : Boolean = True) : LongWord;
    function EncodeCommportName(PortNum : WORD) : String;
    function DecodeCommportName(PortName : String) : WORD;
    function InsertTB_CARDNO(aCardNo,aName,aParentCode,aChildCode,aPosition,aEmCode,aTelNo,aAccPermit,aAsync:string):Boolean;
public
    { Public declarations }
    procedure FormNameSetting;
    procedure FontSetting;
    procedure Form_Close;
  end;

var
  fmConfigSetting: TfmConfigSetting;

implementation
uses
  uCommonVariable,
  uDataBase,
  uDBFormName,
  uDBUpdate,
  uFormUtil,
  uFunction,
  uFormFontUtil;

{$R *.dfm}


procedure TfmConfigSetting.btn_CardCreateClick(Sender: TObject);
var
  i : integer;
  stCardNo : string;
begin
  inherited;
  if Not isDigit(ed_CardCnt.Text) then
  begin
    showmessage('Data Error');
    Exit;
  end;
  for i := 1 to strtoint(ed_CardCnt.Text) do
  begin
    stCardNo := dec2Hex(i,8);
    stCardNo := FillZeroStrNum(stCardNo,8);
    InsertTB_CARDNO(stCardNo,inttostr(i),'000','000','',inttostr(i),'','Y','N');
    lb_Count.Caption.Text := inttostr(i);
    Application.ProcessMessages;
  end;
  showmessage('END');
end;

procedure TfmConfigSetting.btn_CardRegistportSaveClick(Sender: TObject);
var
  ini_fun : TiniFile;
begin
  inherited;
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\Config.ini');
    if cmb_ComPort.ItemIndex = 0 then G_nCardRegisterPort := 0
    else
      G_nCardRegisterPort := Integer(ComPortList.Objects[cmb_ComPort.ItemIndex - 1]);
    ini_fun.WriteInteger('FORM','CardRegisterPort',G_nCardRegisterPort);
  Finally
    ini_fun.Free;
  End;
  self.FindSubForm('Main').FindCommand('ACTION').Params.Values['VALUE'] := 'CRADREGISTERPORTREFRESH';
  self.FindSubForm('Main').FindCommand('ACTION').Execute;
  showmessage(dmFormName.GetFormMessage('2','M00024'));
end;

procedure TfmConfigSetting.btn_NameChangeClick(Sender: TObject);
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  stTemp : string;
begin
  inherited;
  if Trim(ed_OldName.Text) = '' then
  begin
    showmessage(dmFormName.GetFormMessage('2','M00060'));
    Exit;
  end;
  if Trim(ed_NewName.Text) = '' then
  begin
    showmessage(dmFormName.GetFormMessage('2','M00061'));
    Exit;
  end;
  stSql := 'Select FM_GUBUN,FM_CODE, FM_NAME' + inttostr(G_nLangeType) + ' as NAME from TB_FORMNAME ';
  if cmb_Condition.ItemIndex = 0 then
     stSql := stSql + ' Where FM_NAME' + inttostr(G_nLangeType) + ' = ''' + Trim(ed_OldName.Text) + ''' '
  else if cmb_Condition.ItemIndex = 1 then
     stSql := stSql + ' Where FM_NAME' + inttostr(G_nLangeType) + ' Like ''%' + Trim(ed_OldName.Text) + '%'' '
  else if cmb_Condition.ItemIndex = 2 then
     stSql := stSql + ' Where FM_NAME' + inttostr(G_nLangeType) + ' Like ''' + Trim(ed_OldName.Text) + '%'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount < 1 then Exit;
      while Not Eof do
      begin
        stTemp := FindField('NAME').AsString;
        stTemp := StringReplace(stTemp,ed_OldName.Text,ed_NewName.Text,[rfReplaceAll]);
        dmDBUpdate.UpdateTB_FORMNAME_Field_StringValue(FindField('FM_GUBUN').AsString,FindField('FM_CODE').AsString,'FM_NAME' + inttostr(G_nLangeType) ,stTemp);
        Next;
      end;

    end;

  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  showmessage(dmFormName.GetFormMessage('2','M00062'));
end;

procedure TfmConfigSetting.chk_AlarmEventViewClick(Sender: TObject);
var
  ini_fun : TiniFile;
begin
  inherited;
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\Monitoring.INI');
    with ini_fun do
    begin
      if chk_AlarmEventView.Checked then WriteInteger('AlarmEvent','Show',1)
      else WriteInteger('AlarmEvent','Show',0);
    end;

  Finally
    ini_fun.Free;
  End;
end;

procedure TfmConfigSetting.ComportRefresh;
var
  nCount : integer;
  i : integer;
begin
  nCount := GetSerialPortList(ComPortList,False);
  cmb_ComPort.Clear;
  cmb_ComPort.Items.add(dmFormName.GetFormMessage('3','M00009'));
  cmb_ComPort.ItemIndex := -1;
  if nCount = 0 then
  begin
    Exit;
  end;

  for i:= 0 to nCount - 1 do
  begin
    cmb_ComPort.items.Add(ComPortList.Strings[i])
  end;
  cmb_ComPort.ItemIndex := 0;

end;

function TfmConfigSetting.DecodeCommportName(PortName: String): WORD;
var
 Pt : Integer;
begin
 PortName := UpperCase(PortName);
 if (Copy(PortName, 1, 3) = 'COM') then begin
    Delete(PortName, 1, 3);
    Pt := Pos(':', PortName);
    if Pt = 0 then Result := 0
       else Result := StrToInt(Copy(PortName, 1, Pt-1));
 end
 else if (Copy(PortName, 1, 7) = '\\.\COM') then begin
    Delete(PortName, 1, 7);
    Result := StrToInt(PortName);
 end
 else Result := 0;

end;

function TfmConfigSetting.EncodeCommportName(PortNum: WORD): String;
begin
 if PortNum < 10
    then Result := 'COM' + IntToStr(PortNum) + ':'
    else Result := '\\.\COM'+IntToStr(PortNum);

end;

procedure TfmConfigSetting.FontSetting;
begin
  dmFormFontUtil.TravelFormFontSetting(self,G_stFontName,inttostr(G_nFontSize));
  dmFormFontUtil.TravelAdvOfficeTabSetOfficeStylerFontSetting(AdvOfficeTabSetOfficeStyler1, G_stFontName,inttostr(G_nFontSize));
  dmFormFontUtil.FormAdvOfficeTabSetOfficeStylerSetting(AdvOfficeTabSetOfficeStyler1,G_stFormStyle);
  dmFormFontUtil.FormAdvToolBarOfficeStylerSetting(AdvToolBarOfficeStyler1,G_stFormStyle);
  dmFormFontUtil.FormStyleSetting(self,AdvToolBarOfficeStyler1);

end;

procedure TfmConfigSetting.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['NAME'] := inttostr(FORMCONFIGSETTING);
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['VALUE'] := 'FALSE';
  self.FindSubForm('Main').FindCommand('FORMENABLE').Execute;

  EmpTypeCodeList.Free;
  ComPortList.Free;
  Action := caFree;
end;

procedure TfmConfigSetting.FormCreate(Sender: TObject);
var
  ini_fun : TiniFile;
begin
  inherited;
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\Monitoring.INI');
    with ini_fun do
    begin
      if ReadInteger('AlarmEvent','Show',0) = 1 then chk_AlarmEventView.Checked := True
      else chk_AlarmEventView.Checked := False;
    end;

  Finally
    ini_fun.Free;
  End;
  Height := G_nChildFormDefaultHeight;
  EmpTypeCodeList := TStringList.Create;
  ComPortList := TStringList.Create;

  menuTab.ActiveTabIndex := 1;
  menuTabChange(self);

  ComportRefresh;
  FontSetting;
end;


procedure TfmConfigSetting.FormNameSetting;
begin
  Caption := dmFormName.GetFormMessage('1','M00025');
  menuTab.AdvOfficeTabs[0].Caption := dmFormName.GetFormMessage('1','M00035');
  menuTab.AdvOfficeTabs[1].Caption := dmFormName.GetFormMessage('1','M00047');
  menuTab.AdvOfficeTabs[2].Caption := dmFormName.GetFormMessage('4','M00132');
  FormNameChange.Caption.Text := dmFormName.GetFormMessage('4','M00132');
  btn_NameChange.Caption := dmFormName.GetFormMessage('4','M00133');
  gb_Change.Caption := dmFormName.GetFormMessage('4','M00134');
  lb_SearchName.Caption.Text := dmFormName.GetFormMessage('4','M00135');
  lb_ChangeName.Caption.Text := dmFormName.GetFormMessage('4','M00136');

  dongCodeList.Caption.Text := dmFormName.GetFormMessage('1','M00047');

  lb_RegPort.Caption.Text := dmFormName.GetFormMessage('4','M00023');
  btn_CardRegistportSave.Caption :=  dmFormName.GetFormMessage('4','M00014');

  cmb_Condition.Clear;
  cmb_Condition.Items.Add(dmFormName.GetFormMessage('4','M00137'));
  cmb_Condition.Items.Add(dmFormName.GetFormMessage('4','M00138'));
  cmb_Condition.Items.Add(dmFormName.GetFormMessage('4','M00139'));
  cmb_Condition.ItemIndex := 0;
end;

procedure TfmConfigSetting.FormResize(Sender: TObject);
begin
  BodyPanel.Left := 0;
  BodyPanel.Top := 0;
  BodyPanel.Height := Height - menuTab.Height;

end;

procedure TfmConfigSetting.FormShow(Sender: TObject);
var
  stComPort : string;
  nIndex : integer;
begin
  top := 0;
  Left := 0;
  Width := BodyPanel.Width;

  if G_nCardRegisterPort > 0 then
  begin
    stComPort := EncodeCommportName(G_nCardRegisterPort);
    nIndex := cmb_ComPort.Items.IndexOf(stComPort);
    if nIndex > -1 then cmb_ComPort.ItemIndex := nIndex;
  end else
    cmb_ComPort.ItemIndex := 0;

  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['NAME'] := inttostr(FORMCONFIGSETTING);
  self.FindSubForm('Main').FindCommand('FORMENABLE').Params.Values['VALUE'] := 'TRUE';
  self.FindSubForm('Main').FindCommand('FORMENABLE').Execute;
  FormNameSetting;
end;

procedure TfmConfigSetting.Form_Close;
begin
  Close;
end;

function TfmConfigSetting.GetSerialPortList(List: TStringList;
  const doOpenTest: Boolean): LongWord;
type
 TArrayPORT_INFO_1 = array[0..0] Of PORT_INFO_1;
 PArrayPORT_INFO_1 = ^TArrayPORT_INFO_1;
var
{$IF USE_ENUMPORTS_API}
 PL : PArrayPORT_INFO_1;
 TotalSize, ReturnCount : LongWord;
 Buf : String;
 CommNum : WORD;
{$IFEND}
 I : LongWord;
 CHandle : THandle;
begin
 List.Clear;
{$IF USE_ENUMPORTS_API}
 EnumPorts(nil, 1, nil, 0, TotalSize, ReturnCount);
 if TotalSize < 1 then begin
    Result := 0;
    Exit;
    end;
 GetMem(PL, TotalSize);
 EnumPorts(nil, 1, PL, TotalSize, TotalSize, Result);

 if Result < 1 then begin
    FreeMem(PL);
    Exit;
    end;

 for I:=0 to Result-1 do begin
    Buf := UpperCase(PL^[I].pName);
    CommNum := DecodeCommportName(PL^[I].pName);
    if CommNum = 0 then Continue;
    List.AddObject(EncodeCommportName(CommNum), Pointer(CommNum));
    end;
{$ELSE}
 for I:=1 to G_nMaxComPort do List.AddObject(EncodeCommportName(I), Pointer(I));
{$IFEND}
 // Open Test
 if List.Count > 0 then
   for I := List.Count-1 downto 0 do
   begin
      CHandle := CreateFile(PChar(List[I]), GENERIC_WRITE or GENERIC_READ,
        0, nil, OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        0);
      if CHandle = INVALID_HANDLE_VALUE then
      begin
        if doOpenTest or (GetLastError() <> ERROR_ACCESS_DENIED) then
            List.Delete(I);
        Continue;
      end;
      CloseHandle(CHandle);
   end;

 Result := List.Count;
{$IF USE_ENUMPORTS_API}
 if Assigned(PL) then FreeMem(PL);
{$IFEND}

end;

function TfmConfigSetting.InsertTB_CARDNO(aCardNo, aName, aParentCode,
  aChildCode, aPosition, aEmCode, aTelNo, aAccPermit, aAsync: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_CARD (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CA_CARDNO,';
  stSql := stSql + ' CA_CODE,';
  stSql := stSql + ' CA_NAME,';
  stSql := stSql + ' BC_PARENTCODE,';
  stSql := stSql + ' BC_CHILDCODE,';
  stSql := stSql + ' CA_POSITION,';
  stSql := stSql + ' CA_TELNUM,';
  stSql := stSql + ' CA_ACCPERMIT,';
  stSql := stSql + ' CA_ASYNC) ';
  stSql := stSql + ' VALUES( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCardNo + ''',';
  stSql := stSql + '''' + aEmCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aParentCode + ''',';
  stSql := stSql + '''' + aChildCode + ''',';
  stSql := stSql + '''' + aPosition + ''',';
  stSql := stSql + '''' + aTelNo + ''',';
  stSql := stSql + '''' + aAccPermit + ''',';
  stSql := stSql + '''' + aAsync + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

procedure TfmConfigSetting.menuTabChange(Sender: TObject);
begin
  if menuTab.ActiveTabIndex = 0 then //Ȩ
  begin
    if menuTab.AdvOfficeTabs.Items[0].Caption = dmFormName.GetFormMessage('1','M00035') then Close
    else
    begin
      menuTab.ActiveTabIndex := 1;
      menuTabChange(self);
    end;
  end else if menuTab.ActiveTabIndex = 1 then
  begin
    menuTab.AdvOfficeTabs.Items[0].Caption := dmFormName.GetFormMessage('1','M00035');
    FormNameChange.Visible := False;
    dongCodeList.Visible := True;
    dongCodeList.Align := alClient;
    pan_TestData.Visible := False;
  end else if menuTab.ActiveTabIndex = 2 then
  begin
    menuTab.AdvOfficeTabs.Items[0].Caption := dmFormName.GetFormMessage('1','M00040');
    dongCodeList.Visible := False;
    FormNameChange.Visible := True;
    FormNameChange.Align := alClient;
    pan_TestData.Visible := False;
  end else if menuTab.ActiveTabIndex = 3 then
  begin
    menuTab.AdvOfficeTabs.Items[0].Caption := dmFormName.GetFormMessage('1','M00040');
    dongCodeList.Visible := False;
    FormNameChange.Visible := False;
    pan_TestData.Visible := True;
    pan_TestData.Align := alClient;
  end;
end;


procedure TfmConfigSetting.btn_addClick(Sender: TObject);
begin
  inherited;
  menutab.ActiveTabIndex := 2;
  menutabChange(self);
end;


initialization
  RegisterClass(TfmConfigSetting);
Finalization
  UnRegisterClass(TfmConfigSetting);

end.
